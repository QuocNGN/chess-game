@startuml "Chess game"
hide circle

class Board {
  - cells: Cell[][]
  + moveChessPiece(chessPiece: ChessPieceBase, destinationCell: Cell)
  + checkEndGame()
  + setUpBoard(chessPieces: ChessPieceBase[])
}

class Cell {
  - row: number
  - column: number
  - chessPiece: ChessPieceBase
  + setChessPiece(chessPiece: ChessPieceBase)
  + getChessPiece(): ChessPieceBase
}

class Player {
  - color: string
  - moveChessPiece(chessPiece: ChessPieceBase, destinationCell: Cell)
  - undoMove()
  - redoMove()
}

class ChessPieceBase {
  - moveStrategies: IMoveStrategy[]
  - player: Player
  + setPlayer(player: Player)
  + checkAvailableMoveCells()
  + doMove()
  + canMoveTo(cell: Cell): boolean
}

class Pawn extends ChessPieceBase {
  + doMove()
}

class Knight extends ChessPieceBase {
  + doMove()
}

class Bishop extends ChessPieceBase {
  + doMove()
}

class Rook extends ChessPieceBase {
  + doMove()
}

class Queen extends ChessPieceBase {
  + doMove()
}

class King extends ChessPieceBase {
  + doMove()
}

interface IMoveStrategy { 
  + checkAvailableMoveCells()
  + doMove()
}

class MoveStraight implements IMoveStrategy { }

class MoveDiagonal implements IMoveStrategy { }

class MoveL implements IMoveStrategy { }

class MaxRangeDecorator implements IMoveStrategy {
  - IMoveStrategy move
}

class OnlyFowardDecorator implements IMoveStrategy {
  - IMoveStrategy move
}

class Game {
  - board: Board
  - history: History
  - whitePlayer: Player
  - blackPlayer: Player
  + startGame()
  + endGame()
  + undoMove()
  + redoMove()
  + showHistory()
}

class History { 
  - moves: HistoryMove[]
  - redoMoves: HistoryMove[]
  + getMove(index: number): HistoryMove
  + addMove(chessPiece: ChessPieceBase, destinationCell: Cell)
  + showHistory()
  + undoMove()
  + redoMove()
}

class HistoryMove {
  - chessPiece: ChessPieceBase
  - destinationCell: Cell
}

class SpecialMoveManager {
  + checkCastling(chessPiece: ChessPieceBase)
  + checkEnPassant(chessPiece: ChessPieceBase)
  + checkPawnPromotion(chessPiece: ChessPieceBase)
}

ChessPieceBase -down-o IMoveStrategy

Board -down-o Cell
Board -down-o ChessPieceBase
Board .right.> History

History -down-* HistoryMove

Game -down-o Board
Game -down-o History
Game -down-o Player

Player .up.> Board
Player .up.> Game

Player -down-> ChessPieceBase
ChessPieceBase -down-> Pawn
ChessPieceBase -down-> Knight
ChessPieceBase -down-> Bishop
ChessPieceBase -down-> Rook
ChessPieceBase -down-> Queen
ChessPieceBase -down-> King
Game -down-> SpecialMoveManager

@enduml
